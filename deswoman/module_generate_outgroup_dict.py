import os
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from deswoman.module_colors import openFile


__author__ = "Anna Grandchamp"
__contributor__ = ""
__copyright__ = ""
__credits__ = []
__license__ = ""
__version__ = "1.0.0"
__maintainer__ = "Anna Grandchamp"
__email__ = "anna.grandchamp@inserm.fr"


def get_dot_special_case_dic(name_intermediate_directory: str) -> dict:
    """
    Extracts dot status from the previously generated "Dot_indication" file.

    This function reads a file named "Dot_indication.txt" located in the specified
    intermediate directory and creates a dictionary to map dot status symbols
    (e.g., ".", "+", "-") to corresponding values. The dot status
    information is in the first line of the file, and it returns a dictionary
    with these symbols as keys.

    Args:
        name_intermediate_directory (str): The directory path where the "Dot_indication.txt" file is located.

    Returns:
        dict: A dictionary where keys are dot status symbols (".", "+", "-") and values are their corresponding entries
              from the "Dot_indication.txt" file.
    """
    link_dot_file = name_intermediate_directory + "/Dot_indication.txt"
    my_file = openFile(link_dot_file)
    my_dico_dot = {".": my_file[0], "+": "+", "-": "-"}
    return my_dico_dot


def validate_dict_content_genome(dico_final: dict) -> dict:
    """
    Validates the dictionary of outgroup genome and transcriptome file links.

    This function takes a dictionary generated by the "create_outgroup_dict_strategy1" function, where each key represents an outgroup species
    and its associated values are lists containing links to its genome and transcriptome files. The function ensures that each outgroup has
    both a genome FASTA file and a GFF annotation file. If either file is missing for an outgroup, that species is excluded from the dictionary.

    Args:
        dico_final (dict): A dictionary where the keys are species names (outgroups), and the values are lists containing links to the genome
                            FASTA file and the GFF annotation file.

    Returns:
        None: The function modifies the input dictionary in place by removing species that don't have exactly two file links (genome and GFF).

    Example:
        >>> dico = {"species1": ["species1.fasta", "species1.gff"],
                   "species2": ["species2.fasta"],
                   "species3": ["species3.fasta", "species3.gff"]}
        >>> validate_dict_content_genome(dico)
        >>> print(dico)
        {"species1": ["species1.fasta", "species1.gff"],
         "species3": ["species3.fasta", "species3.gff"]}
    """
    list_line_to_delete = []  # Initialize an empty list to store keys to delete
    for line_species in dico_final:
        # Check if the number of items (values) for each species is not equal to 2
        if len(dico_final[line_species]) != 2:
            # If it's not equal to 2, add the species key to the list for deletion
            list_line_to_delete.append(line_species)

    # Check if there are any species to delete
    if len(list_line_to_delete) > 0:
        # If there are species to delete, iterate through the list
        for i in list_line_to_delete:
            # Delete the species key from the dictionary
            del dico_final[i]


def validate_dict_content_transcriptome(dico_final: dict) -> dict:
    """
    Validates the transcriptome file pairs (FASTA and GTF) for each outgroup species in the dictionary.

    This function takes as input a dictionary generated by the "create_outgroup_dict_strategy1" function, where each key represents an outgroup species
    and the associated values are dictionaries containing file links for the species' genome and transcriptome (FASTA and GTF).
    The function ensures that both the FASTA and GTF files for the transcriptome are present for each species. If either file is missing for a species,
    those entries are removed from the dictionary. The function also checks the integrity of the species' genome and transcriptome files by verifying that
    they exist in binomes (pairs). Only species with complete genome and transcriptome data (both files) will be retained.

    Args:
        dico_final (dict): A dictionary where the keys are species names (outgroups), and the values are dictionaries containing links to genome and
                           transcriptome files (FASTA and GTF). Each species should have exactly 3 keys: "genome_fasta", "genome_gff", "transcriptome_fasta",
                           and "transcriptome_gtf" (if applicable).

    Returns:
        dict: The modified dictionary with species removed if they have incomplete transcriptome or genome file data (i.e., missing either FASTA or GTF for transcriptomes).

    Example:
        >>> dico = {"species1": {"genome_fasta": "species1.fasta", "genome_gff": "species1.gff", "transcriptome_fasta": "species1.fasta", "transcriptome_gtf": "species1.gtf"},
                   "species2": {"genome_fasta": "species2.fasta", "genome_gff": "species2.gff", "transcriptome_fasta": "species2.fasta"},
                   "species3": {"genome_fasta": "species3.fasta", "genome_gff": "species3.gff", "transcriptome_fasta": "species3.fasta", "transcriptome_gtf": "species3.gtf"}}
        >>> validate_dict_content_transcriptome(dico)
        >>> print(dico)
        {"species1": {"genome_fasta": "species1.fasta", "genome_gff": "genomespecies11.gff", "transcriptome_fasta": "species1.fasta", "transcriptome_gtf": "species1.gtf"},
         "species3": {"genome_fasta": "species3.fasta", "genome_gff": "species3.gff", "transcriptome_fasta": "species3.fasta", "transcriptome_gtf": "species3.gtf"}}
    """
    list_line_to_delete = []  # Initialize an empty list to store keys to delete
    for line_species in dico_final:
        # Check if the number of items (values) for each species is equal to 3
        if len(dico_final[line_species]) == 3:
            # If it's equal to 3, add the species key to the list for further inspection
            list_line_to_delete.append(line_species)

    # Check if there are any species to delete
    if len(list_line_to_delete) > 0:
        # If there are species to delete, iterate through the list
        for i in list_line_to_delete:
            # Check if "transcriptome_gtf" key exists in the species dictionary
            if "transcriptome_gtf" in dico_final[i]:
                # If "transcriptome_gtf" key exists, delete it
                del dico_final[i]["transcriptome_gtf"]

            # Check if "transcriptome_fasta" key exists in the species dictionary
            if "transcriptome_fasta" in dico_final[i]:
                # If "transcriptome_fasta" key exists, delete it
                del dico_final[i]["transcriptome_fasta"]


def create_outgroup_dict_strategy1(dico_variables: dict) -> dict:
    """
    Creates a dictionary containing outgroup species data, including paths to genome and transcriptome files.

    This function processes genome and transcriptome files stored in specified repositories for various outgroup species,
    excluding the query species, and organizes them into a dictionary. The dictionary associates each species name with
    the paths to their respective genome (FASTA and GFF files) and, if available, transcriptome files (FASTA and GTF).
    It ensures that each species has both genome files (FASTA and GFF) and valid transcriptome files before adding them to the dictionary.

    The function relies on two input paths:
    - `path_to_genome_repository`: The directory containing genome files (both FASTA and GFF).
    - `path_to_transcriptome_repository`: The directory containing transcriptome files (both FASTA and GTF).

    Any species that doesn't have both genome files or transcriptome files (if applicable) will be excluded from the resulting dictionary.

    Args:
        dico_variables (dict): A dictionary containing the paths to the genome and transcriptome repositories
                                and the name of the query species. Expected keys:
            - "path_to_genome_repository": The path to the folder containing genome files (FASTA and GFF).
            - "path_to_transcriptome_repository": The path to the folder containing transcriptome files (FASTA and GTF).
            - "query": The name of the query species (to be excluded from the outgroup species list).

    Returns:
        dict: A dictionary where the keys are species names (excluding the query species) and the values are dictionaries
              containing the paths to the species' genome files (FASTA and GFF) and, if applicable, transcriptome files (FASTA and GTF).
              The dictionary will only include species with complete genome data (both FASTA and GFF files) and valid transcriptome data (both FASTA and GTF files).
    """
    dico_final = {}  # Initialize an empty dictionary to store final data

    # Extracting variables from the input dictionary
    path_to_genome = dico_variables["path_to_genome_repository"]
    path_to_transcriptome = dico_variables["path_to_transcriptome_repository"]
    name_query = dico_variables["query"]

    # Processing genome files
    elts_dir = os.listdir(path_to_genome)
    for file in elts_dir:
        lst = file.split(".")
        # Checking if the file is not the query and has a valid extension
        if len(lst) > 1:
            target_name = lst[0]
            if target_name != name_query:
                if lst[1] in ["fna", "fa", "fasta"]:
                    # Valid genome file extensions
                    path_to_query_fasta_genome = path_to_genome + "/" + file
                    # dico_final[target_name] stores genome_fasta and genome_gff
                    if target_name not in dico_final:
                        dico_final[target_name] = {
                            "genome_fasta": path_to_query_fasta_genome
                        }
                    else:
                        dico_final[target_name]["genome_fasta"] = (
                            path_to_query_fasta_genome
                        )
                elif lst[1] in ["gff", "gff3"]:
                    # Valid GFF file extensions
                    path_to_genome_gff = path_to_genome + "/" + file
                    if target_name not in dico_final:
                        dico_final[target_name] = {"genome_gff": path_to_genome_gff}
                    else:
                        dico_final[target_name]["genome_gff"] = path_to_genome_gff
    # remove genomes without gf or fasta associated
    validate_dict_content_genome(dico_final)

    # Processing transcriptome files
    elts_dir2 = os.listdir(path_to_transcriptome)
    for file in elts_dir2:
        lst = file.split(".")
        if len(lst) > 1:
            target_name = lst[0]
            # Checking if the transcriptome file corresponds to a species in dico_final
            if target_name in dico_final:
                if lst[1] == "gtf":  # Valid GTF file extension
                    path_to_transcriptome_gtf = path_to_transcriptome + "/" + file
                    dico_final[target_name]["transcriptome_gtf"] = (
                        path_to_transcriptome_gtf
                    )
                elif lst[1] in [
                    "fna",
                    "fa",
                    "fasta",
                ]:  # Valid transcriptome file extensions
                    path_to_transcriptome_fasta = path_to_transcriptome + "/" + file
                    dico_final[target_name]["transcriptome_fasta"] = (
                        path_to_transcriptome_fasta
                    )

    # Validating transcriptome data in the dictionary
    validate_dict_content_transcriptome(dico_final)
    return dico_final
